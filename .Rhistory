dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
return(dt)
}
}
#' reading lofreq vcf file and formatting in v-pipe context
#'
#' @param file_name: path to vcf file generated from lofreq run
#' @param regex_sample: regex with which sample name can be extracted (v-pipe set-up)
#'
#' @return formatted vcf dt, witch additional columns location_code and date
#' @export
#'
#' @examples
#'
read_and_mark_vcf <- function(file_path, regex_sample = "[A-Z]\\d{1}_\\d{2}_\\d{4}_\\d{2}_\\d{2}"){
dt = read_vcf(file_path)
if(is.null(dt)){
return(NULL)
}else{
dt[, sample_name := str_extract(file_path,regex_sample)]
#only care about point mutations
dt = dt[nchar(REF) == 1 & nchar(ALT) == 1]
dt[, c('cell','location_code', 'year','month','day') := tstrsplit(sample_name, "_", fixed=TRUE)]
dt[, c('date') := paste(year,month,day,sep = "-")]
dt[, c('year','month','day') := NULL]
return(dt)
}
}
x="/Users/anjohn/Desktop/euler/wastewater/Influenza/work-IA_H1/v-pipe/results_Aviti_250113/A6_17_2024_12_28/250113/variants/SNVs/snvs.vcf"
read_vcf(x)
read_vcf(x)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print(dt)
return(dt)
}
}
read_vcf(x)
read_vcf(x)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
# print(dt)
return(dt)
}
}
read_vcf(x)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print(dt)
return(dt)
}
}
read_vcf
read_vcf(x)
blah = read_vcf(x)
blah
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
# print(dt)
return(dt)
}
}
blah = read_vcf(x)
blah
print(blah)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt = dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
# print(dt)
return(dt)
}
}
blah = read_vcf(x)
print(blah)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
if(dim(dt)[1] == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
# print(dt)
return(dt)
}
}
blah = read_vcf(x)
print(blah)
x
fread(x)
read_vcf <- function(file_path){
dt = fread(file_path)
#if no rows output NULL
d = dim(dt)[1]
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
# print(dt)
return(dt)
}
}
blah = read_vcf(x)
blah
print(blah)
typeof(blah)
suppressPackageStartupMessages(require(optparse))
suppressPackageStartupMessages(require(data.table))
suppressPackageStartupMessages(require(rconfig))
suppressPackageStartupMessages(require(do))
library(tidyverse)
# library(Biostrings)
library(seqinr)
#' reading lofreq vcf file
#'
#' @param file_path: path to vcf file generated from lofreq run
#'
#' @return cleaned and formatted dt, if vcf is empty NULL is returned
#' @export
#'
#' @examples
read_vcf <- function(file_path){
dt = fread(file_path)
print("1")
typeof(dt)
#if no rows output NULL
d = dim(dt)[1]
print("2")
typeof(dt)
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
print("3")
typeof(dt)
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
print("4")
typeof(dt)
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
print("5")
typeof(dt)
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print("6")
typeof(dt)
# print(dt)
return(dt)
}
}
read_vcf
x="/Users/anjohn/Desktop/euler/wastewater/Influenza/work-IA_H1/v-pipe/results_Aviti_250113/A6_17_2024_12_28/250113/variants/SNVs/snvs.vcf"
read_vcf(x)
read_vcf <- function(file_path){
dt = fread(file_path)
print("1")
print(typeof(dt))
#if no rows output NULL
d = dim(dt)[1]
print("2")
print(typeof(dt))
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
print("3")
print(typeof(dt))
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
print("4")
print(typeof(dt))
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
print("5")
print(typeof(dt))
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print("6")
print(typeof(dt))
# print(dt)
return(dt)
}
}
read_vcf(x)
fread(x) %>% typeof()
data.table::fread(x) %>% typeof()
fread(x) %>% as.data.table()
fread(x) %>% as.data.table() %>% typeof()
fread(x) %>% as.data.frame() %>% typeof()
data.table(x="1", y="shit")
data.table(x="1", y="shit") %>% typeof()
read_vcf <- function(file_path){
# dt = fread(file_path)
dt = fread(file_path,
skip = grep("^#", readLines(file_path), value = TRUE)[length(grep("^#", readLines(file_path)))])
print("1")
print(typeof(dt))
#if no rows output NULL
d = dim(dt)[1]
print("2")
print(typeof(dt))
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
print("3")
print(typeof(dt))
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
print("4")
print(typeof(dt))
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
print("5")
print(typeof(dt))
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print("6")
print(typeof(dt))
# print(dt)
return(dt)
}
}
read_vcf(x)
read_vcf
data.table(x="1", y="shit") %>% is.data.frame()
data.table(x="1", y="shit") %>% is.data.table()
read_vcf <- function(file_path){
dt = fread(file_path)
print("1")
print(is.data.table(dt))
#if no rows output NULL
d = dim(dt)[1]
print("2")
print(is.data.table(dt))
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
print("3")
print(is.data.table(dt))
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
print("4")
print(is.data.table(dt))
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
print("5")
print(is.data.table(dt))
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print("6")
print(is.data.table(dt))
# print(dt)
return(dt)
}
}
read_vcf
read_vcf(x)
blah = read_vcf(x)
print(blah)
is.data.table(blah)
blah
blah
read_vcf <- function(file_path){
dt = fread(file_path)
print("1")
print(is.data.table(dt))
#if no rows output NULL
d = dim(dt)[1]
print("2")
print(is.data.table(dt))
if(d == 0){
return(NULL)
}else{
#different output format with parallelized lofreq
#dt[, c('DP', 'AF', 'SB', 'DP4', 'V13', 'V14') := tstrsplit(INFO, ';', fixed = TRUE)]
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
print("3")
print(is.data.table(dt))
#dt[, c('DP4', 'V13', 'V14','INFO') := NULL]
dt[, c('INFO') := NULL]
print("4")
print(is.data.table(dt))
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
print("5")
print(is.data.table(dt))
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
print("6")
print(is.data.table(dt))
# print(dt)
return(dt)
}
}
blah = read_vcf(x)
blah
blah
y="/Users/anjohn/Desktop/euler/wastewater/Influenza/work-IA_H3/v-pipe/results_Aviti_241129/A1_05_2024_11_13/241129/variants/SNVs/snvs.vcf""
y="/Users/anjohn/Desktop/euler/wastewater/Influenza/work-IA_H3/v-pipe/results_Aviti_241129/A1_05_2024_11_13/241129/variants/SNVs/snvs.vcf"
y
fread(y)
fread(y,
skip = grep("^#", readLines(y), value = TRUE)[length(grep("^#", readLines(y)))])
readLines(y)
grep("^#", readLines(file_path), value = TRUE)
grep("^#", readLines(y), value = TRUE)
grep("[^#]", readLines(y), value = TRUE)
grep("[^#]", readLines(y), value = TRUE)
grep("^[^#]", readLines(y), value = TRUE)
grep("^[^#]", readLines(x), value = TRUE)
length(grep("^[^#]", readLines(x), value = TRUE))
length(grep("^[^#]", readLines(y), value = TRUE))
length(grep("^[^#]", readLines(y)))
length(grep("^[^#]", readLines(x)))
grep("^[^#]", readLines(x))
length(grep("^[^#]", readLines(y)))==0
read_vcf <- function(file_path){
#if vcf has no lines w/o # == Empty
l = grep("^[^#]", readLines(file_path))
if(l==0){
return(NULL)
}else{
dt = fread(file_path)
#different output format with parallelized lofre
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
return(dt)
}
}
y="/Users/anjohn/Desktop/euler/wastewater/Influenza/work-IA_H3/v-pipe/results_Aviti_241129/A1_05_2024_11_13/241129/variants/SNVs/snvs.vcf"
read_vcf(y)
read_vcf <- function(file_path){
#if vcf has no lines w/o # == Empty
l = length(grep("^[^#]", readLines(file_path)))
if(l==0){
return(NULL)
}else{
dt = fread(file_path)
#different output format with parallelized lofre
dt[, c('DP', 'AF', 'SB') := tstrsplit(INFO, ';', fixed = TRUE)[1:3]]
dt[, c('INFO') := NULL]
dt[, `:=`(
AF = str_remove_all(AF, "AF="),
DP = str_remove_all(DP, "DP="),
SB = str_remove_all(SB, "SB=")
)]
# Convert columns to numeric
dt[, c('POS', 'QUAL', 'DP', 'AF', 'SB') := lapply(.SD, as.numeric),
.SDcols = c('POS', 'QUAL', 'DP', 'AF', 'SB')]
return(dt)
}
}
read_vcf(y)
read_vcf(x)
read_vcf(x)
blah = read_vcf(x)
blah
blah
